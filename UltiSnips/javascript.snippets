global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import ${1:Component} from '$2`!p snip.rv=lowerdash(t[1])`';
endsnippet

snippet impf "import Component from './Component'" b
import ${1:Component} from '${2:./}${3:$1}';
endsnippet

snippet impn "import { Component } from 'Module'" b
import { ${1:Component} } from '${2:Module}';
endsnippet

snippet exp "export default Component"
export default ${1:Component};
endsnippet

snippet expf "export File from './File'" b
export ${1:Component} from '${2:./}$1';
endsnippet

snippet expn "export nested" b
export { ${1:Component} } from '${2:Module}';
endsnippet

snippet expd "reexport default" b
import ${1:Component} from '${2:./}$1';
export default $1;
endsnippet

snippet cl "console.log" w
console.log(${1:'Message'});
endsnippet

snippet clv "console.log variable" w
console.log('${1:var}=', $1);
endsnippet

snippet ce "console.error" w
console.error(${1:'Error'});
endsnippet

snippet cev "console.error variable" w
console.error('${1:var}=', $1);
endsnippet

snippet cw "console.warn" w
console.warn(${1:'Warning'});
endsnippet

snippet cwv "console.warn variable" w
console.warn('${1:var}=', $1);
endsnippet

snippet ct "console.table" w
console.table(${1:var});
endsnippet

snippet cd "console.debug" w
console.debug(${1:'Message'});
endsnippet

snippet cdv "console.debug variable" w
console.debug('${1:var}=', $1);
endsnippet

# ==========================================
# React Snippets
#
snippet fc "function component" b
const ${1:`!v expand('%:t:r')`} = (${2:props}) => {
	${3:return null;}$0
};
endsnippet

snippet fce "function component exported" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = (${2:props}) => {
	${3:return null;}$0
};

export default $1;
endsnippet

snippet pfc "pure function component" b
const ${1:`!v expand('%:t:r')`} = (${2:props}) => (
	${3:null}$0
);
endsnippet

snippet pfce "pure function component exported" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = (${2:props}) => (
	${3:null}$0
);

export default $1;
endsnippet

snippet ffce "forwarded function component export" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = React.forwardRef((${2:props}, ref) => {
	return (
		<div ref={ref}>$0
		</div>
	);
});

export default $1;
endsnippet

snippet fpfce "forwarded function component export" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = React.forwardRef((${2:props}, ref) => (
	<div ref={ref}>$0
	</div>
));

export default $1;
endsnippet

snippet cdp "component default props" b
${1:`!v expand('%:t:r')`}.defaultProps = {
	$2
};
endsnippet

snippet cpt "component prop types" b
${1:`!v expand('%:t:r')`}.propTypes = {
	${2:className}: ${3:PropTypes.string},$0
};
endsnippet

# ==========================================
# Hooks and effects
#
snippet useS "useState()" b
const [${1:state}, ${3:set`!p snip.rv=upperfirst(t[1])`}] = useState(${2:value});
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [$1]);
endsnippet

snippet upd "update state on dep update" b
useEffect(() => {
	${1:setState}(${2:value});
}, [$2]);
endsnippet

snippet useRed "useReducer(reducer, initialValue)" b
const [${3:state}, ${4:dispatch}] = useReducer(${1:reducer}, ${2:null});
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5]);
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4]);
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null});
endsnippet

snippet useI "useImperitiveHandle(ref, createHandle, [inputs])" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]});
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$0
}, [$1]);
endsnippet

snippet useDV "useDebugValue(value)" b
useDebugValue(${1:null});
endsnippet

# ==========================================
# Prop Types Section
#

# Inline prop types
snippet pt.a "PropTypes.array" w
PropTypes.array
endsnippet

snippet pt.ar "PropTypes.array.isRequired" w
PropTypes.array.isRequired
endsnippet

snippet pt.b "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet pt.br "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired
endsnippet

snippet pt.f "PropTypes.func" w
PropTypes.func
endsnippet

snippet pt.fr "PropTypes.func.isRequired" w
PropTypes.func.isRequired
endsnippet

snippet pt.nu "PropTypes.number" w
PropTypes.number
endsnippet

snippet pt.nur "PropTypes.number.isRequired" w
PropTypes.number.isRequired
endsnippet

snippet pt.o "PropTypes.object" w
PropTypes.object
endsnippet

snippet pt.or "PropTypes.object.isRequired" w
PropTypes.object.isRequired
endsnippet

snippet pt.s "PropTyes.string" w
PropTypes.string
endsnippet

snippet pt.sr "PropTyes.string.isRequired" w
PropTypes.string.isRequired
endsnippet

snippet pt.no "PropTypes.node" w
PropTypes.node
endsnippet

snippet pt.nor "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet pt.e "PropTypes.element" w
PropTypes.element
endsnippet

snippet pt.er "PropTypes.element.isRequired" w
PropTypes.element.isRequired
endsnippet

snippet pt.ao "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet pt.aor "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.io "PropTypes.instanceOf()" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet pt.ior "PropTypes.instanceOf().isRequired" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.oo "PropTypes.objectOf()" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet pt.oor "PropTypes.objectOf().isRequired" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.one "PropTypes.oneOf([])" w
PropTypes.oneOf(['$1'$2])
endsnippet

snippet pt.oner "PropTypes.oneOf([]).isRequired" w
PropTypes.oneOf(['$1'$2]).isRequired
endsnippet

snippet pt.onet "PropTYpes.oneOfType([])" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet pt.onetr "PropTYpes.oneOfType([]).isRequired" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet pt.sh "PropTypes.shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet pt.shr "PropTypes.shape.isRequired" w
PropTypes.shape({
	$1
}).isRequired
endsnippet
